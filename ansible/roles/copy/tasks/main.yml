# Copyright (C)  2018 Matt Baumann
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

---
# Copies files from the local project folder onto the server.


- name: Creates temp folder
  tempfile:
    state: directory
    prefix: "ansibleTmpFolder-"
  register: tmpfolder
  when: dest is not defined

- name: Removes the previous server files
  file:
    path: "{{ dest | default(tmpfolder.path) }}"
    state: absent
  when: delete

- name: Adds the parent folder again
  file:
    path: "{{ dest | default(tmpfolder.path) }}"
    owner: "{{ owner | default(ansible_user_id) }}"
    group: "{{ group | default(ansible_user_id) }}"
    state: directory
  when: delete

- name: Copies the filetree from {{src}} to {{ dest | default(tmpfolder.path) }}
  block:

    - name: Create directories in {{ dest | default(tmpfolder.path) }}
      file:
        path: "{{ dest | default(tmpfolder.path) }}/{{item.path | dirname }}"
        owner: "{{ owner | default(ansible_user_id) }}"
        group: "{{ group | default(ansible_user_id) }}"
        state: directory
      loop: "{{ query('filetree', '{{playbook_dir}}/{{ src }}') }}"

    - name: Copy files from {{src}} to {{ dest | default(tmpfolder.path) }}
      copy:
        src: "{{ item.src }}"
        dest: "{{ dest | default(tmpfolder.path) }}/{{ item.path }}"
        owner: "{{ owner | default(ansible_user_id) }}"
        group: "{{ group | default(ansible_user_id) }}"
        mode: "{{ mode | default(item.mode) }}"
      when: item.state == "file" and not item.src.endswith(".template")
      loop: "{{ query('filetree', '{{playbook_dir}}/{{ src }}') }}"

    - name: Template files from {{src}} to {{ dest | default(tmpfolder.path) }}
      template:
        src: "{{ item.src }}"
        dest: "{{ dest | default(tmpfolder.path) }}/{{ item.path | replace('.template', '') }}" # Remove template specific file extension
        owner: "{{ owner | default(ansible_user_id) }}"
        group: "{{ group | default(ansible_user_id) }}"
        mode: "{{ mode | default(item.mode) }}"
      when: item.state == "file" and item.src.endswith(".template")
      loop: "{{ query('filetree', '{{playbook_dir}}/{{ src }}') }}"


    - name: Recreate symlinks from {{src}} to {{ dest | default(tmpfolder.path) }}
      file:
        src: "{{ item.src }}"
        dest: "{{ dest | default(tmpfolder.path) }}/{{ item.path }}"
        state: link
        force: yes
        mode: "{{ mode | default(item.mode) }}"
      when: item.state == "link"
      loop: "{{ query('filetree', '{{playbook_dir}}/{{ src }}') }}"

  rescue:
    - name: Gather stats for root path
      stat: path={{ dest | default(tmpfolder.path) }}
      register: dest_stats

    - name: Show status for root path
      debug: msg={{ dest_stats }}

    - name: Show root path to copy file-hierarchy to
      debug: msg="{{ dest | default(tmpfolder.path) }}"

    - name: Remove already written files
      file:
        path: "{{ dest | default(tmpfolder.path) }}"
        state: absent